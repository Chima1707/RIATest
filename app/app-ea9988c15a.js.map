{"version":3,"sources":["app/app.module.js","app/layouts/navbar/navbar.controller.js","app/flight-delays/flight-delays.state.js","app/flight-delays/flight-delays.service.js","app/flight-delays/flight-delays.controller.js","app/flight-delays/flight-delays.charts.service.js","app/flight-delays/analysis/analysis.controller.js","app/app.state.js","app/app.constants.js","app/app.js"],"names":["config","$urlRouterProvider","otherwise","angular","module","value","moment","$inject","NavbarController","toggleNavbar","vm","isNavbarCollapsed","collapseNavbar","this","controller","stateConfig","$stateProvider","state","parent","url","views","content@","templateUrl","controllerAs","FlightDelayService","$http","DATA_URL","DATA_INFO","$q","$localForage","getDataAsArray","res","data","split","slice","START_INDEX","filter","line","convertDataToJson","map","getTimeAsMinuteOfDay","str","arr","match","Number","hour","min","filterString","replace","getDelayRatio","arrivalDelay","elapsedTime","cols","flightDate","Date","FLIGHT_DATE_COL","day","getDay","distance","DISTANCE_COL","departureTime","DEP_TIME_COL","departureTimeMin","arrivalTime","ARR_TIME_COL","arrivalTimeMin","ELAPSED_TIME_COL","ARR_DELAY_COL","delayed","delayRatio","origin","String","ORIGIN_COL","destination","DEST_COL","addAirPortData","forEach","item","airports","Object","keys","getFlightDelayDataLocal","flightDelayData","when","getItem","then","reject","Error","getFlightDelayDataRemote","get","cacheData","setItem","queryFlightDelays","query","delayTimeData","delayRatioData","totalDelayRatio","id","push","averageDelayRatio","length","Math","round","getDelaysByDistance","delays","distances","getFlightDelayData","factory","FlightDelaysController","FlightDelayChartService","getArrivalDelayHistogramData","options","range","bins","intervals","binData","d3","layout","histogram","chartData","key","bar","values","localMaxY","y","x","max","selected","chartOptions","arrivalDelayTime","xAxis","yAxis","arrivalDelayRatio","xAxisFormat","d","drawLine","text","chartId","arrivalDelaytime","histogramOptions","getHistogramOptions","weekDays","name","enableSearch","every","search","delayData","getYDomain","yDomain","chart","type","margin","top","right","bottom","left","callback","xScale","scale","svg","select","height","onXAxis","append","style","attr","i","showValues","valueFormat","format","duration","axisLabel","tickFormat","isFunction","ticks","axisLabelDistance","getLineChartOptions","lineChartOptions","showDistX","showDistY","tooltipContent","useInteractiveGuideline","FlightDelaysAnalysisController","init","getAnalysisData","analysis","index","strokeWidth","classed","abstract","navbar@","resolve","constant","run","$templateCache","put"],"mappings":"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","file":"app/app-ea9988c15a.js","sourcesContent":["(function () {\n    'use strict';\n\n    angular\n        .module('App', [\n            'ui.bootstrap',\n            'ui.router',\n            'LocalForageModule',\n            'ui.select',\n            'ngSanitize',\n            'nvd3'\n        ])\n        .config(config)\n        .value('moment', moment)\n\n    config.$inject = ['$urlRouterProvider']\n\n    function config($urlRouterProvider) {\n        $urlRouterProvider.otherwise('/flight-delays');\n    }\n\n})();\n","(function () {\n    'use strict';\n\n    angular\n        .module('App')\n        .controller('NavbarController', NavbarController);\n\n    NavbarController.$inject = [];\n\n    function NavbarController() {\n        var vm = this;\n\n        vm.isNavbarCollapsed = true;\n\n        vm.toggleNavbar = toggleNavbar;\n        vm.collapseNavbar = collapseNavbar;\n\n        function toggleNavbar() {\n            vm.isNavbarCollapsed = !vm.isNavbarCollapsed;\n        }\n\n        function collapseNavbar() {\n            vm.isNavbarCollapsed = true;\n        }\n    }\n})();\n","(function () {\n    'use strict';\n    angular\n        .module('App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('flight-delays', {\n            parent: 'app',\n            url: '/flight-delays',\n            views: {\n                'content@': {\n                    templateUrl: 'app/flight-delays/flight-delays.html',\n                    controller: 'FlightDelaysController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n\n        $stateProvider.state('analysis', {\n            parent: 'app',\n            url: '/analysis',\n            views: {\n                'content@': {\n                    templateUrl: 'app/flight-delays/analysis/analysis.html',\n                    controller: 'FlightDelaysAnalysisController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n","(function () {\n    'use strict';\n\n    angular\n        .module('App')\n        .factory('FlightDelayService', FlightDelayService);\n\n    FlightDelayService.$inject = ['$http', 'DATA_URL', 'DATA_INFO', 'moment', '$q', '$localForage'];\n\n    function FlightDelayService($http, DATA_URL, DATA_INFO, moment, $q, $localForage) {\n\n        var flightDelayData;\n\n        function getDataAsArray(res) {\n            var data = res.data\n            return data.split('\\n').slice(DATA_INFO.START_INDEX).filter(function (line) {\n                return line\n            });\n        }\n\n        function convertDataToJson(data) {\n            return data.map(function (line) {\n                var cols = line.split(',')\n                var flightDate = new Date(cols[DATA_INFO.FLIGHT_DATE_COL]);\n                var day = flightDate.getDay();\n\n\n                var distance = Number(cols[DATA_INFO.DISTANCE_COL]);\n                var departureTime = cols[DATA_INFO.DEP_TIME_COL];\n\n                departureTime = filterString(departureTime)\n                var departureTimeMin = getTimeAsMinuteOfDay(departureTime)\n\n                var arrivalTime = cols[DATA_INFO.ARR_TIME_COL];\n                arrivalTime = filterString(arrivalTime)\n                var arrivalTimeMin = getTimeAsMinuteOfDay(arrivalTime)\n\n                var elapsedTime = Number(cols[DATA_INFO.ELAPSED_TIME_COL])\n\n                var arrivalDelay = Number(cols[DATA_INFO.ARR_DELAY_COL]);\n                var delayed = arrivalDelay > 0\n                var delayRatio = delayed ? getDelayRatio(arrivalDelay, elapsedTime) : 0\n\n\n                var origin = String(cols[DATA_INFO.ORIGIN_COL])\n                origin = filterString(origin)\n\n                var destination = String(cols[DATA_INFO.DEST_COL])\n                destination = filterString(destination)\n\n                function getTimeAsMinuteOfDay(str) {\n                    var arr = str.match(/.{1,2}/g).map(Number);\n                    var hour = arr[0]\n                    var min = arr[1]\n                    return !hour ? min : (hour * 60) + min\n                }\n\n\n                function filterString(str) {\n                    return str.replace(/\"/g, \"\")\n                }\n\n                function getDelayRatio(arrivalDelay, elapsedTime) {\n                    return (arrivalDelay / elapsedTime) * 100;\n                }\n\n                return {\n                    flightDate: flightDate,\n                    day: day,\n                    origin: origin,\n                    destination: destination,\n                    departureTime: departureTime,\n                    departureTimeMin: departureTimeMin,\n                    arrivalTime: arrivalTime,\n                    arrivalTimeMin: arrivalTimeMin,\n                    arrivalDelay: arrivalDelay,\n                    elapsedTime: elapsedTime,\n                    distance: distance,\n                    delayed: delayed,\n                    delayRatio: delayRatio\n                }\n            })\n        }\n\n        function addAirPortData(data) {\n            var res = {}\n            data.forEach(function (item) {\n                if (!res[item.origin]) {\n                    res[item.origin] = true\n                }\n                if (!res[item.destination]) {\n                    res[item.destination] = true\n                }\n            })\n            var airports = Object.keys(res)\n            return { data: data, airports: airports }\n        }\n\n        function getFlightDelayDataLocal() {\n            if (flightDelayData) {\n                return $q.when(flightDelayData)\n            } else {\n                return $localForage.getItem('flightData').then(function (data) {\n                    if (!data) {\n                        return $q.reject(new Error('data not found'))\n                    }\n                    flightDelayData = data\n                    return $q.when(flightDelayData)\n                })\n            }\n        }\n\n        function getFlightDelayDataRemote() {\n            return $http.get(DATA_URL)\n                .then(getDataAsArray)\n                .then(convertDataToJson)\n                .then(addAirPortData)\n                .then(cacheData)\n                .catch($q.reject)\n        }\n\n        function cacheData(data) {\n            return $localForage.setItem('flightData', data)\n                .then(function (res) {\n                    flightDelayData = res;\n                    return flightDelayData;\n                })\n        }\n\n        function queryFlightDelays(query, data) {\n            var delayTimeData = []\n            var delayRatioData = []\n            var totalDelayRatio = 0\n            data.filter(function (item) {\n                return item.delayed\n                    && item.day === query.day.id\n                    && item.destination === query.destination\n                    && item.origin === query.origin\n            })\n                .forEach(function (item) {\n                    delayTimeData.push(item.departureTimeMin)\n                    delayRatioData.push(item.delayRatio)\n                    totalDelayRatio += item.delayRatio\n                })\n            var averageDelayRatio = !delayRatioData.length ? 0 : Math.round((totalDelayRatio / delayRatioData.length) * 100) / 100\n\n            return { delayTimeData: delayTimeData, delayRatioData: delayRatioData, averageDelayRatio: averageDelayRatio };\n        }\n\n        function getDelaysByDistance(data) {\n            var delays = []\n            var distances = []\n            data.filter(function (item) {\n                return item.delayed\n            }).forEach(function (item) {\n                delays.push(item.arrivalDelay)\n                distances.push(item.distance)\n            })\n            return { delays: delays, distances: distances }\n        }\n\n\n        return {\n            getFlightDelayData: function () {\n                return getFlightDelayDataLocal()\n                    .catch(getFlightDelayDataRemote)\n            },\n            queryFlightDelays: queryFlightDelays,\n            getDelaysByDistance: getDelaysByDistance\n        }\n    }\n})();","(function () {\n    'use strict';\n\n    angular\n        .module('App')\n        .controller('FlightDelaysController', FlightDelaysController);\n\n    FlightDelaysController.$inject = ['FlightDelayService', 'FlightDelayChartService', 'flightDelayData'];\n\n    function FlightDelaysController(FlightDelayService, FlightDelayChartService, flightDelayData) {\n        var vm = this;\n        vm.flightDelayData = flightDelayData\n        vm.selected = { day: '', origin: '', destination: '' };\n\n        var chartOptions = {\n            arrivalDelayTime: {\n                bins: 24, max: 0, intervals: 60,\n                xAxis: 'Hour of the day', yAxis: 'Number of arrival delays'\n            },\n            arrivalDelayRatio: {\n                xAxisFormat: function (d) {\n                    return d * 10\n                },\n                bins: 10, max: 0, intervals: 10, xAxis: 'Delay ratio in %', yAxis: 'Frequency',\n                drawLine: { value: 0, text: 'Average(%) is ', chartId: 'ratios' }\n            }\n        }\n\n        vm.chartData = { arrivalDelaytime: [] }\n        vm.histogramOptions = { arrivalDelaytime: FlightDelayChartService.getHistogramOptions(chartOptions.arrivalDelayTime) }\n\n        vm.weekDays = [\n            { id: 0, name: 'Sunday' },\n            { id: 1, name: 'Monday' },\n            { id: 2, name: 'Tuesday' },\n            { id: 3, name: 'Wednesday' },\n            { id: 4, name: 'Thursday' },\n            { id: 5, name: 'Friday' },\n            { id: 6, name: 'Saturday' }\n        ];\n\n\n        vm.enableSearch = function () {\n            return Object.keys(vm.selected).every(function (key) {\n                return vm.selected[key]\n            })\n\n        }\n\n        vm.search = function () {\n            var delayData = FlightDelayService.queryFlightDelays(vm.selected, vm.flightDelayData.data)\n\n            vm.chartData.arrivalDelaytime = getArrivalDelayHistogramData(delayData.delayTimeData, chartOptions.arrivalDelayTime);\n            vm.histogramOptions.arrivalDelayTime = FlightDelayChartService.getHistogramOptions(chartOptions.arrivalDelayTime);\n\n            var averageDelayRatio = delayData.averageDelayRatio\n            chartOptions.arrivalDelayRatio.drawLine.value = averageDelayRatio\n\n            vm.chartData.arrivalDelayRatio = getArrivalDelayHistogramData(delayData.delayRatioData, chartOptions.arrivalDelayRatio);\n            vm.histogramOptions.arrivalDelayRatio = FlightDelayChartService.getHistogramOptions(chartOptions.arrivalDelayRatio)\n        }\n\n        function getArrivalDelayHistogramData(data, options) {\n            var range = [0, options.bins * options.intervals]\n            var binData = d3.layout.histogram().bins(options.bins).range(range)(data);\n            var chartData = { key: 'Count', bar: true, values: [] };\n            var localMaxY = 0\n            binData.forEach(function (item) {\n                if (localMaxY < item.y) {\n                    localMaxY = item.y\n                }\n                chartData.values.push([item.x, item.y])\n            })\n            options.max = localMaxY;\n            return [chartData]\n        }\n\n    }\n})();\n","(function () {\n    'use strict';\n\n    angular\n        .module('App')\n        .factory('FlightDelayChartService', FlightDelayChartService);\n\n    FlightDelayChartService.$inject = [];\n\n    function FlightDelayChartService() {\n\n        function getHistogramOptions(options) {\n            function getYDomain() {\n                return options.max ? [0, options.max] : [0]\n            }\n\n            var yDomain = getYDomain();\n            var histogramOptions = {\n                chart: {\n                    type: 'historicalBarChart',\n                    margin: {\n                        top: 20,\n                        right: 20,\n                        bottom: 65,\n                        left: 50\n                    },\n                    callback: function (chart) {\n                        if (options.drawLine && options.drawLine.value) {\n                            var xScale = chart.xAxis.scale();\n                            var margin = chart.margin();\n                            var svg = d3.select('#' + options.drawLine.chartId + ' svg')\n                            var height = chart.height();\n                            var onXAxis = xScale(options.drawLine.value) / options.bins\n                            svg.append('line')\n                                .style(\"stroke\", \"#FF7F0E\")\n                                .style(\"stroke-width\", \"2.5px\")\n                                .attr('x1', onXAxis + margin.left)\n                                .attr(\"y1\", margin.top)\n                                .attr('x2', onXAxis + margin.left)\n                                .attr('y2', height - margin.bottom);\n                            svg.append('text')\n                                .attr(\"x\", onXAxis + margin.left)\n                                .attr(\"y\", margin.top)\n                                .text(options.drawLine.text + '' + options.drawLine.value);\n\n                        }\n                    },\n                    height: 300,\n                    x: function (d, i) {\n                        return i;\n                    },\n                    y: function (d) {\n                        return d[1];\n                    },\n                    showValues: true,\n                    valueFormat: function (d) {\n                        return d3.format(',.1f')(d);\n                    },\n                    duration: 100,\n                    xAxis: {\n                        axisLabel: options.xAxis,\n                        tickFormat: function (d) {\n                            var format = options.xAxisFormat\n                            return format && angular.isFunction(format) ? format(d) : d\n                        },\n                        ticks: options.bins,\n\n                    },\n                    yAxis: {\n                        axisLabel: options.yAxis,\n                        axisLabelDistance: -10,\n                        tickFormat: function (d) {\n                            return d3.format(',.1f')(d);\n                        }\n                    },\n                    yDomain: yDomain\n                }\n            }\n            return histogramOptions;\n        }\n\n        function getLineChartOptions(options) {\n            var lineChartOptions = {\n                chart: {\n                    type: 'scatterChart',\n                    height: 600,\n\n                    showDistX: true,\n                    showDistY: true,\n                    tooltipContent: function (key) {\n                        return '<h3>' + key + '</h3>';\n                    },\n                    duration: 100,\n                    useInteractiveGuideline: true,\n\n                    xAxis: {\n                        axisLabel: options.xAxis\n                    },\n                    yAxis: {\n                        axisLabel: options.yAxis,\n                        tickFormat: function (d) {\n                            return d3.format('.02f')(d);\n                        },\n                        axisLabelDistance: -5\n                    }\n                }\n            };\n            return lineChartOptions\n        }\n\n        return {\n            getHistogramOptions: getHistogramOptions,\n            getLineChartOptions: getLineChartOptions\n        }\n    }\n})();","(function () {\n    'use strict';\n\n    angular\n        .module('App')\n        .controller('FlightDelaysAnalysisController', FlightDelaysAnalysisController);\n\n    FlightDelaysAnalysisController.$inject = ['FlightDelayService', 'FlightDelayChartService', 'flightDelayData'];\n\n    function FlightDelaysAnalysisController(FlightDelayService, FlightDelayChartService, flightDelayData) {\n        var vm = this;\n        vm.chartOptions = { xAxis: 'Distance in miles', yAxis: 'Arrival delay in minutes' }\n        vm.analysis = {}\n\n\n        function init() {\n            var data = FlightDelayService.getDelaysByDistance(flightDelayData.data)\n            var chartData = getAnalysisData(data)\n            vm.analysis.data = chartData\n            vm.analysis.options = FlightDelayChartService.getLineChartOptions(vm.chartOptions)\n        }\n\n        function getAnalysisData(data) {\n            var distances = data.distances\n            var delays = data.delays\n            var values = distances.map(function (distance, index) {\n                return { x: distance, y: delays[index] }\n            })\n\n            return [{\n                values: values, key: 'distance/arrival delay',\n                strokeWidth: 2,\n                classed: 'dashed'\n            }]\n        }\n\n        init()\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('app', {\n            abstract: true,\n            views: {\n                'navbar@': {\n                    templateUrl: 'app/layouts/navbar/navbar.html',\n                    controller: 'NavbarController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                flightDelayData:['FlightDelayService',\n                    function (FlightDelayService) {\n                        return FlightDelayService.getFlightDelayData();\n                    }\n                ]\n            }\n        });\n    }\n})();","(function () {\n    'use strict';\n/* eslint-disable */ \n    // DO NOT EDIT THIS FILE, EDIT THE GULP TASK NGCONSTANT SETTINGS INSTEAD WHICH GENERATES THIS FILE\n    angular\n        .module('App')\n        .constant('DEBUG_INFO_ENABLED', false)\n        .constant('DATA_URL', \"/RIATest/content/data.csv\")\n        .constant('DATA_INFO', {\n\t\"START_INDEX\": 1,\n\t\"FLIGHT_DATE_COL\": 0,\n\t\"ORIGIN_COL\": 1,\n\t\"DEST_COL\": 2,\n\t\"DEP_TIME_COL\": 3,\n\t\"ARR_TIME_COL\": 4,\n\t\"ARR_DELAY_COL\": 5,\n\t\"ELAPSED_TIME_COL\": 6,\n\t\"DISTANCE_COL\": 7\n})\n;\n})();\n","(function () {\n    'use strict';\n\n    angular\n        .module('App', [\n            'ui.bootstrap',\n            'ui.router',\n            'LocalForageModule',\n            'ui.select',\n            'ngSanitize',\n            'nvd3'\n        ])\n        .config(config)\n        .value('moment', moment)\n\n    config.$inject = ['$urlRouterProvider']\n\n    function config($urlRouterProvider) {\n        $urlRouterProvider.otherwise('/flight-delays');\n    }\n\n})();\n;\n(function () {\n    'use strict';\n\n    angular\n        .module('App')\n        .controller('NavbarController', NavbarController);\n\n    NavbarController.$inject = [];\n\n    function NavbarController() {\n        var vm = this;\n\n        vm.isNavbarCollapsed = true;\n\n        vm.toggleNavbar = toggleNavbar;\n        vm.collapseNavbar = collapseNavbar;\n\n        function toggleNavbar() {\n            vm.isNavbarCollapsed = !vm.isNavbarCollapsed;\n        }\n\n        function collapseNavbar() {\n            vm.isNavbarCollapsed = true;\n        }\n    }\n})();\n;\n(function () {\n    'use strict';\n    angular\n        .module('App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('flight-delays', {\n            parent: 'app',\n            url: '/flight-delays',\n            views: {\n                'content@': {\n                    templateUrl: 'app/flight-delays/flight-delays.html',\n                    controller: 'FlightDelaysController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n\n        $stateProvider.state('analysis', {\n            parent: 'app',\n            url: '/analysis',\n            views: {\n                'content@': {\n                    templateUrl: 'app/flight-delays/analysis/analysis.html',\n                    controller: 'FlightDelaysAnalysisController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n;\n(function () {\n    'use strict';\n\n    angular\n        .module('App')\n        .factory('FlightDelayService', FlightDelayService);\n\n    FlightDelayService.$inject = ['$http', 'DATA_URL', 'DATA_INFO', 'moment', '$q', '$localForage'];\n\n    function FlightDelayService($http, DATA_URL, DATA_INFO, moment, $q, $localForage) {\n\n        var flightDelayData;\n\n        function getDataAsArray(res) {\n            var data = res.data\n            return data.split('\\n').slice(DATA_INFO.START_INDEX).filter(function (line) {\n                return line\n            });\n        }\n\n        function convertDataToJson(data) {\n            return data.map(function (line) {\n                var cols = line.split(',')\n                var flightDate = new Date(cols[DATA_INFO.FLIGHT_DATE_COL]);\n                var day = flightDate.getDay();\n\n\n                var distance = Number(cols[DATA_INFO.DISTANCE_COL]);\n                var departureTime = cols[DATA_INFO.DEP_TIME_COL];\n\n                departureTime = filterString(departureTime)\n                var departureTimeMin = getTimeAsMinuteOfDay(departureTime)\n\n                var arrivalTime = cols[DATA_INFO.ARR_TIME_COL];\n                arrivalTime = filterString(arrivalTime)\n                var arrivalTimeMin = getTimeAsMinuteOfDay(arrivalTime)\n\n                var elapsedTime = Number(cols[DATA_INFO.ELAPSED_TIME_COL])\n\n                var arrivalDelay = Number(cols[DATA_INFO.ARR_DELAY_COL]);\n                var delayed = arrivalDelay > 0\n                var delayRatio = delayed ? getDelayRatio(arrivalDelay, elapsedTime) : 0\n\n\n                var origin = String(cols[DATA_INFO.ORIGIN_COL])\n                origin = filterString(origin)\n\n                var destination = String(cols[DATA_INFO.DEST_COL])\n                destination = filterString(destination)\n\n                function getTimeAsMinuteOfDay(str) {\n                    var arr = str.match(/.{1,2}/g).map(Number);\n                    var hour = arr[0]\n                    var min = arr[1]\n                    return !hour ? min : (hour * 60) + min\n                }\n\n\n                function filterString(str) {\n                    return str.replace(/\"/g, \"\")\n                }\n\n                function getDelayRatio(arrivalDelay, elapsedTime) {\n                    return (arrivalDelay / elapsedTime) * 100;\n                }\n\n                return {\n                    flightDate: flightDate,\n                    day: day,\n                    origin: origin,\n                    destination: destination,\n                    departureTime: departureTime,\n                    departureTimeMin: departureTimeMin,\n                    arrivalTime: arrivalTime,\n                    arrivalTimeMin: arrivalTimeMin,\n                    arrivalDelay: arrivalDelay,\n                    elapsedTime: elapsedTime,\n                    distance: distance,\n                    delayed: delayed,\n                    delayRatio: delayRatio\n                }\n            })\n        }\n\n        function addAirPortData(data) {\n            var res = {}\n            data.forEach(function (item) {\n                if (!res[item.origin]) {\n                    res[item.origin] = true\n                }\n                if (!res[item.destination]) {\n                    res[item.destination] = true\n                }\n            })\n            var airports = Object.keys(res)\n            return { data: data, airports: airports }\n        }\n\n        function getFlightDelayDataLocal() {\n            if (flightDelayData) {\n                return $q.when(flightDelayData)\n            } else {\n                return $localForage.getItem('flightData').then(function (data) {\n                    if (!data) {\n                        return $q.reject(new Error('data not found'))\n                    }\n                    flightDelayData = data\n                    return $q.when(flightDelayData)\n                })\n            }\n        }\n\n        function getFlightDelayDataRemote() {\n            return $http.get(DATA_URL)\n                .then(getDataAsArray)\n                .then(convertDataToJson)\n                .then(addAirPortData)\n                .then(cacheData)\n                .catch($q.reject)\n        }\n\n        function cacheData(data) {\n            return $localForage.setItem('flightData', data)\n                .then(function (res) {\n                    flightDelayData = res;\n                    return flightDelayData;\n                })\n        }\n\n        function queryFlightDelays(query, data) {\n            var delayTimeData = []\n            var delayRatioData = []\n            var totalDelayRatio = 0\n            data.filter(function (item) {\n                return item.delayed\n                    && item.day === query.day.id\n                    && item.destination === query.destination\n                    && item.origin === query.origin\n            })\n                .forEach(function (item) {\n                    delayTimeData.push(item.departureTimeMin)\n                    delayRatioData.push(item.delayRatio)\n                    totalDelayRatio += item.delayRatio\n                })\n            var averageDelayRatio = !delayRatioData.length ? 0 : Math.round((totalDelayRatio / delayRatioData.length) * 100) / 100\n\n            return { delayTimeData: delayTimeData, delayRatioData: delayRatioData, averageDelayRatio: averageDelayRatio };\n        }\n\n        function getDelaysByDistance(data) {\n            var delays = []\n            var distances = []\n            data.filter(function (item) {\n                return item.delayed\n            }).forEach(function (item) {\n                delays.push(item.arrivalDelay)\n                distances.push(item.distance)\n            })\n            return { delays: delays, distances: distances }\n        }\n\n\n        return {\n            getFlightDelayData: function () {\n                return getFlightDelayDataLocal()\n                    .catch(getFlightDelayDataRemote)\n            },\n            queryFlightDelays: queryFlightDelays,\n            getDelaysByDistance: getDelaysByDistance\n        }\n    }\n})();;\n(function () {\n    'use strict';\n\n    angular\n        .module('App')\n        .controller('FlightDelaysController', FlightDelaysController);\n\n    FlightDelaysController.$inject = ['FlightDelayService', 'FlightDelayChartService', 'flightDelayData'];\n\n    function FlightDelaysController(FlightDelayService, FlightDelayChartService, flightDelayData) {\n        var vm = this;\n        vm.flightDelayData = flightDelayData\n        vm.selected = { day: '', origin: '', destination: '' };\n\n        var chartOptions = {\n            arrivalDelayTime: {\n                bins: 24, max: 0, intervals: 60,\n                xAxis: 'Hour of the day', yAxis: 'Number of arrival delays'\n            },\n            arrivalDelayRatio: {\n                xAxisFormat: function (d) {\n                    return d * 10\n                },\n                bins: 10, max: 0, intervals: 10, xAxis: 'Delay ratio in %', yAxis: 'Frequency',\n                drawLine: { value: 0, text: 'Average(%) is ', chartId: 'ratios' }\n            }\n        }\n\n        vm.chartData = { arrivalDelaytime: [] }\n        vm.histogramOptions = { arrivalDelaytime: FlightDelayChartService.getHistogramOptions(chartOptions.arrivalDelayTime) }\n\n        vm.weekDays = [\n            { id: 0, name: 'Sunday' },\n            { id: 1, name: 'Monday' },\n            { id: 2, name: 'Tuesday' },\n            { id: 3, name: 'Wednesday' },\n            { id: 4, name: 'Thursday' },\n            { id: 5, name: 'Friday' },\n            { id: 6, name: 'Saturday' }\n        ];\n\n\n        vm.enableSearch = function () {\n            return Object.keys(vm.selected).every(function (key) {\n                return vm.selected[key]\n            })\n\n        }\n\n        vm.search = function () {\n            var delayData = FlightDelayService.queryFlightDelays(vm.selected, vm.flightDelayData.data)\n\n            vm.chartData.arrivalDelaytime = getArrivalDelayHistogramData(delayData.delayTimeData, chartOptions.arrivalDelayTime);\n            vm.histogramOptions.arrivalDelayTime = FlightDelayChartService.getHistogramOptions(chartOptions.arrivalDelayTime);\n\n            var averageDelayRatio = delayData.averageDelayRatio\n            chartOptions.arrivalDelayRatio.drawLine.value = averageDelayRatio\n\n            vm.chartData.arrivalDelayRatio = getArrivalDelayHistogramData(delayData.delayRatioData, chartOptions.arrivalDelayRatio);\n            vm.histogramOptions.arrivalDelayRatio = FlightDelayChartService.getHistogramOptions(chartOptions.arrivalDelayRatio)\n        }\n\n        function getArrivalDelayHistogramData(data, options) {\n            var range = [0, options.bins * options.intervals]\n            var binData = d3.layout.histogram().bins(options.bins).range(range)(data);\n            var chartData = { key: 'Count', bar: true, values: [] };\n            var localMaxY = 0\n            binData.forEach(function (item) {\n                if (localMaxY < item.y) {\n                    localMaxY = item.y\n                }\n                chartData.values.push([item.x, item.y])\n            })\n            options.max = localMaxY;\n            return [chartData]\n        }\n\n    }\n})();\n;\n(function () {\n    'use strict';\n\n    angular\n        .module('App')\n        .factory('FlightDelayChartService', FlightDelayChartService);\n\n    FlightDelayChartService.$inject = [];\n\n    function FlightDelayChartService() {\n\n        function getHistogramOptions(options) {\n            function getYDomain() {\n                return options.max ? [0, options.max] : [0]\n            }\n\n            var yDomain = getYDomain();\n            var histogramOptions = {\n                chart: {\n                    type: 'historicalBarChart',\n                    margin: {\n                        top: 20,\n                        right: 20,\n                        bottom: 65,\n                        left: 50\n                    },\n                    callback: function (chart) {\n                        if (options.drawLine && options.drawLine.value) {\n                            var xScale = chart.xAxis.scale();\n                            var margin = chart.margin();\n                            var svg = d3.select('#' + options.drawLine.chartId + ' svg')\n                            var height = chart.height();\n                            var onXAxis = xScale(options.drawLine.value) / options.bins\n                            svg.append('line')\n                                .style(\"stroke\", \"#FF7F0E\")\n                                .style(\"stroke-width\", \"2.5px\")\n                                .attr('x1', onXAxis + margin.left)\n                                .attr(\"y1\", margin.top)\n                                .attr('x2', onXAxis + margin.left)\n                                .attr('y2', height - margin.bottom);\n                            svg.append('text')\n                                .attr(\"x\", onXAxis + margin.left)\n                                .attr(\"y\", margin.top)\n                                .text(options.drawLine.text + '' + options.drawLine.value);\n\n                        }\n                    },\n                    height: 300,\n                    x: function (d, i) {\n                        return i;\n                    },\n                    y: function (d) {\n                        return d[1];\n                    },\n                    showValues: true,\n                    valueFormat: function (d) {\n                        return d3.format(',.1f')(d);\n                    },\n                    duration: 100,\n                    xAxis: {\n                        axisLabel: options.xAxis,\n                        tickFormat: function (d) {\n                            var format = options.xAxisFormat\n                            return format && angular.isFunction(format) ? format(d) : d\n                        },\n                        ticks: options.bins,\n\n                    },\n                    yAxis: {\n                        axisLabel: options.yAxis,\n                        axisLabelDistance: -10,\n                        tickFormat: function (d) {\n                            return d3.format(',.1f')(d);\n                        }\n                    },\n                    yDomain: yDomain\n                }\n            }\n            return histogramOptions;\n        }\n\n        function getLineChartOptions(options) {\n            var lineChartOptions = {\n                chart: {\n                    type: 'scatterChart',\n                    height: 600,\n\n                    showDistX: true,\n                    showDistY: true,\n                    tooltipContent: function (key) {\n                        return '<h3>' + key + '</h3>';\n                    },\n                    duration: 100,\n                    useInteractiveGuideline: true,\n\n                    xAxis: {\n                        axisLabel: options.xAxis\n                    },\n                    yAxis: {\n                        axisLabel: options.yAxis,\n                        tickFormat: function (d) {\n                            return d3.format('.02f')(d);\n                        },\n                        axisLabelDistance: -5\n                    }\n                }\n            };\n            return lineChartOptions\n        }\n\n        return {\n            getHistogramOptions: getHistogramOptions,\n            getLineChartOptions: getLineChartOptions\n        }\n    }\n})();;\n(function () {\n    'use strict';\n\n    angular\n        .module('App')\n        .controller('FlightDelaysAnalysisController', FlightDelaysAnalysisController);\n\n    FlightDelaysAnalysisController.$inject = ['FlightDelayService', 'FlightDelayChartService', 'flightDelayData'];\n\n    function FlightDelaysAnalysisController(FlightDelayService, FlightDelayChartService, flightDelayData) {\n        var vm = this;\n        vm.chartOptions = { xAxis: 'Distance in miles', yAxis: 'Arrival delay in minutes' }\n        vm.analysis = {}\n\n\n        function init() {\n            var data = FlightDelayService.getDelaysByDistance(flightDelayData.data)\n            var chartData = getAnalysisData(data)\n            vm.analysis.data = chartData\n            vm.analysis.options = FlightDelayChartService.getLineChartOptions(vm.chartOptions)\n        }\n\n        function getAnalysisData(data) {\n            var distances = data.distances\n            var delays = data.delays\n            var values = distances.map(function (distance, index) {\n                return { x: distance, y: delays[index] }\n            })\n\n            return [{\n                values: values, key: 'distance/arrival delay',\n                strokeWidth: 2,\n                classed: 'dashed'\n            }]\n        }\n\n        init()\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('app', {\n            abstract: true,\n            views: {\n                'navbar@': {\n                    templateUrl: 'app/layouts/navbar/navbar.html',\n                    controller: 'NavbarController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                flightDelayData:['FlightDelayService',\n                    function (FlightDelayService) {\n                        return FlightDelayService.getFlightDelayData();\n                    }\n                ]\n            }\n        });\n    }\n})();;\n(function () {\n    'use strict';\n/* eslint-disable */ \n    // DO NOT EDIT THIS FILE, EDIT THE GULP TASK NGCONSTANT SETTINGS INSTEAD WHICH GENERATES THIS FILE\n    angular\n        .module('App')\n        .constant('DEBUG_INFO_ENABLED', false)\n        .constant('DATA_URL', \"/RIATest/content/data.csv\")\n        .constant('DATA_INFO', {\n\t\"START_INDEX\": 1,\n\t\"FLIGHT_DATE_COL\": 0,\n\t\"ORIGIN_COL\": 1,\n\t\"DEST_COL\": 2,\n\t\"DEP_TIME_COL\": 3,\n\t\"ARR_TIME_COL\": 4,\n\t\"ARR_DELAY_COL\": 5,\n\t\"ELAPSED_TIME_COL\": 6,\n\t\"DISTANCE_COL\": 7\n})\n;\n})();\n;(function(){angular.module(\"App\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"app/flight-delays/flight-delays.html\",\"<div><div class=\\\"row\\\"><div class=\\\"col-md-3\\\"><ui-select ng-model=\\\"vm.selected.day\\\" title=\\\"Week day\\\" theme=\\\"bootstrap\\\"><ui-select-match placeholder=\\\"Choose a week day\\\"><span ng-bind=\\\"vm.selected.day.name\\\"></span></ui-select-match><ui-select-choices repeat=\\\"day in (vm.weekDays | filter: $select.search) track by day.id\\\" position=\\\"down\\\"><span ng-bind=\\\"day.name\\\"></span></ui-select-choices></ui-select></div><div class=\\\"col-md-3\\\"><ui-select ng-model=\\\"vm.selected.origin\\\" title=\\\"Origin airport\\\"><ui-select-match placeholder=\\\"Choose origin airport\\\"><span ng-bind=\\\"vm.selected.origin\\\"></span></ui-select-match><ui-select-choices repeat=\\\"airport in (vm.flightDelayData.airports | filter: $select.search) track by airport\\\" position=\\\"down\\\"><span ng-bind=\\\"airport\\\"></span></ui-select-choices></ui-select></div><div class=\\\"col-md-3\\\"><ui-select ng-model=\\\"vm.selected.destination\\\" title=\\\"Destination airport\\\"><ui-select-match placeholder=\\\"Choose destination airport\\\"><span ng-bind=\\\"vm.selected.destination\\\"></span></ui-select-match><ui-select-choices repeat=\\\"airport in (vm.flightDelayData.airports | filter: $select.search) track by airport\\\" position=\\\"down\\\"><span ng-bind=\\\"airport\\\"></span></ui-select-choices></ui-select></div><div class=\\\"col-md-3\\\"><button class=\\\"btn btn-primary\\\" ng-click=\\\"vm.search()\\\" ng-disabled=\\\"!vm.enableSearch()\\\"><span class=\\\"glyphicon glyphicon-search\\\"></span> <span>Go</span></button></div></div><div class=\\\"vertical-offset-50\\\"></div><div class=\\\"row\\\"><div class=\\\"col-md-6 col-xm-12\\\"><div class=\\\"chart-box radius-primary\\\"><div class=\\\"padded-title\\\"><h4>Arrival delays</h4></div><nvd3 options=\\\"vm.histogramOptions.arrivalDelayTime\\\" data=\\\"vm.chartData.arrivalDelaytime\\\"></nvd3></div></div><div class=\\\"col-md-6 col-xm-12\\\"><div class=\\\"chart-box radius-primary\\\"><div class=\\\"padded-title\\\"><h4>Arrival delay ratio</h4></div><nvd3 id=\\\"ratios\\\" options=\\\"vm.histogramOptions.arrivalDelayRatio\\\" data=\\\"vm.chartData.arrivalDelayRatio\\\"></nvd3></div></div></div></div>\");\n$templateCache.put(\"app/layouts/navbar/navbar.html\",\"<nav class=\\\"navbar navbar-default\\\" role=\\\"navigation\\\"><div class=\\\"container\\\"><div class=\\\"navbar-header\\\"><button type=\\\"button\\\" class=\\\"navbar-toggle\\\" ng-click=\\\"vm.toggleNavbar()\\\"><span class=\\\"sr-only\\\">Toggle navigation</span> <span class=\\\"icon-bar\\\"></span> <span class=\\\"icon-bar\\\"></span> <span class=\\\"icon-bar\\\"></span></button> <a class=\\\"navbar-brand logo\\\" href=\\\"#/\\\" ng-click=\\\"vm.collapseNavbar()\\\"><img class=\\\"logo-img\\\" src=\\\"content/images/logo-jhipster.png\\\"> <span>Flight Delay</span></a></div><div class=\\\"navbar-collapse\\\" uib-collapse=\\\"vm.isNavbarCollapsed\\\"><ul class=\\\"nav navbar-nav navbar-left\\\"><li ui-sref-active=\\\"active\\\"><a ui-sref=\\\"flight-delays\\\" ng-click=\\\"vm.collapseNavbar()\\\"><span class=\\\"glyphicon glyphicon-clock\\\"></span> <span class=\\\"hidden-sm\\\">Arrival delays</span></a></li><li ui-sref-active=\\\"active\\\"><a ui-sref=\\\"analysis\\\" ng-click=\\\"vm.collapseNavbar()\\\"><span class=\\\"glyphicon glyphicon-chart\\\"></span> <span class=\\\"hidden-sm\\\">Analysis</span></a></li></ul></div></div></nav>\");\n$templateCache.put(\"app/flight-delays/analysis/analysis.html\",\"<div class=\\\"row\\\"><div class=\\\"col-md-12 col-xm-12\\\"><div class=\\\"chart-box radius-primary\\\"><div class=\\\"padded-title\\\"><h4>Distance and delay analysis chart</h4></div><nvd3 options=\\\"vm.analysis.options\\\" data=\\\"vm.analysis.data\\\"></nvd3></div></div></div>\");}]);})();"],"sourceRoot":"/source/"}
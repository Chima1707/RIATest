{"version":3,"sources":["app/app.module.js","app/layouts/navbar/navbar.controller.js","app/flight-delays/flight-delays.state.js","app/flight-delays/flight-delays.service.js","app/flight-delays/flight-delays.controller.js","app/flight-delays/flight-delays.charts.service.js","app/app.state.js","app/app.constants.js","app/app.js"],"names":["config","$urlRouterProvider","cfpLoadingBarProvider","latencyThreshold","includeSpinner","otherwise","angular","module","$inject","NavbarController","toggleNavbar","vm","isNavbarCollapsed","collapseNavbar","this","controller","stateConfig","$stateProvider","state","parent","url","views","content@","templateUrl","controllerAs","FlightDelayService","$http","DATA_URL","DATA_INFO","$q","$localForage","getDataAsArray","row","res","data","split","slice","filter","line","convertDataToJson","seperator","getTimeAsMinuteOfDay","str","arr","match","map","Number","hour","min","filterString","replace","getDelayRatio","arrivalDelay","elapsedTime","cols","flightDate","Date","FLIGHT_DATE_COL","day","getDay","distance","DISTANCE_COL","departureTime","DEP_TIME_COL","departureTimeMin","arrivalTime","ARR_TIME_COL","arrivalTimeMin","ELAPSED_TIME_COL","ARR_DELAY_COL","delayed","delayRatio","origin","String","ORIGIN_COL","destination","DEST_COL","addAirPortData","forEach","item","airports","Object","keys","getFlightDelayDataLocal","flightDelayData","when","getItem","then","reject","Error","getFlightDelayDataRemote","get","bind","START_INDEX","SEPERATOR","cacheData","setItem","queryFlightDelays","query","delayTimeData","delayRatioData","totalDelayRatio","maxDelayRatio","id","push","averageDelayRatio","length","Math","round","getFlightDelayData","factory","FlightDelaysController","$timeout","FlightDelayChartService","cfpLoadingBar","preBind","interval","d","getArrivalDelayHistogramData","options","range","bins","intervals","binData","d3","layout","histogram","chartData","bar","values","localMaxY","y","x","max","selected","weekDays","name","chartOptions","arrivalDelayTime","xAxis","yAxis","arrivalDelayRatio","xAxisFormat","drawLine","value","text","chartId","histogramOptions","enableSearch","every","key","search","start","complete","delayData","arrivalData","arrivalDelaytime","getHistogramOptions","delayRatioChartInterval","getYDomain","yDomain","chart","type","margin","top","right","bottom","left","useInteractiveGuideline","callback","xScale","scale","svg","select","height","onXAxis","append","style","attr","i","showValues","valueFormat","format","duration","axisLabel","tickFormat","isFunction","ticks","axisLabelDistance","abstract","navbar@","resolve","constant","run","$templateCache","put"],"mappings":"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","file":"app/app-ae178cc46e.js","sourcesContent":["(function () {\n  'use strict'\n\n  angular\n        .module('App', [\n          'ui.bootstrap',\n          'ui.router',\n          'LocalForageModule',\n          'ui.select',\n          'ngSanitize',\n          'nvd3',\n          'angular-loading-bar',\n          'ngAnimate'\n        ])\n        .config(config)\n\n  config.$inject = ['$urlRouterProvider', 'cfpLoadingBarProvider']\n  function config ($urlRouterProvider, cfpLoadingBarProvider) {\n    cfpLoadingBarProvider.latencyThreshold = 100\n    cfpLoadingBarProvider.includeSpinner = false\n    $urlRouterProvider.otherwise('/flight-delays')\n  }\n})()\n","(function () {\n  'use strict'\n\n  angular\n        .module('App')\n        .controller('NavbarController', NavbarController)\n\n  NavbarController.$inject = []\n\n  function NavbarController () {\n    var vm = this\n\n    vm.isNavbarCollapsed = true\n\n    vm.toggleNavbar = toggleNavbar\n    vm.collapseNavbar = collapseNavbar\n\n    function toggleNavbar () {\n      vm.isNavbarCollapsed = !vm.isNavbarCollapsed\n    }\n\n    function collapseNavbar () {\n      vm.isNavbarCollapsed = true\n    }\n  }\n})()\n","(function () {\n  'use strict'\n  angular\n        .module('App')\n        .config(stateConfig)\n\n  stateConfig.$inject = ['$stateProvider']\n\n  function stateConfig ($stateProvider) {\n    $stateProvider.state('flight-delays', {\n      parent: 'app',\n      url: '/flight-delays',\n      views: {\n        'content@': {\n          templateUrl: 'app/flight-delays/flight-delays.html',\n          controller: 'FlightDelaysController',\n          controllerAs: 'vm'\n        }\n      }\n    })\n  }\n})()\n","(function () {\n  'use strict'\n\n  angular\n        .module('App')\n        .factory('FlightDelayService', FlightDelayService)\n\n  FlightDelayService.$inject = ['$http', 'DATA_URL', 'DATA_INFO', '$q', '$localForage']\n\n  function FlightDelayService ($http, DATA_URL, DATA_INFO, $q, $localForage) {\n    var flightDelayData\n\n        /**\n         * Split csv file contents into array of strings starting from a specifed index.\n         * @param {Number} row - row to start slice from.\n         * @param {String} res - Multiine string representing csv file contents.\n         * @returns {Array} = Array of strings, each line representing an row in the file.\n         */\n    function getDataAsArray (row, res) {\n      var data = res.data\n      return data.split('\\n').slice(row).filter(function (line) {\n        return line\n      })\n    }\n\n        /**\n         * Converts an array of strings into array of objects.\n         * @param {Array} data- Array of strings.\n         * @param {String} separator - split strings by.\n         * @returns {Array} = Array of objects.\n         */\n    function convertDataToJson (seperator, data) {\n      seperator = seperator || ','\n\n      function getTimeAsMinuteOfDay (str) {\n                // get minutes of the day, 12:00 => 720 minute of the day\n        var arr = str.match(/.{1,2}/g).map(Number)\n        var hour = arr[0]\n        var min = arr[1]\n        return !hour ? min : (hour * 60) + min\n      }\n\n      function filterString (str) {\n        return str.replace(/\"/g, '')\n      }\n\n      function getDelayRatio (arrivalDelay, elapsedTime) {\n                // delay ratio is arrival delay in minutes / flight elapsed time in minutes\n        return (arrivalDelay / elapsedTime) * 100\n      }\n            // map through all the array entries, converting each entry to a corresponding object.\n      return data.map(function (line) {\n        var cols = line.split(seperator)\n        var flightDate = new Date(cols[DATA_INFO.FLIGHT_DATE_COL])\n        var day = flightDate.getDay()\n\n        var distance = Number(cols[DATA_INFO.DISTANCE_COL])\n        var departureTime = cols[DATA_INFO.DEP_TIME_COL]\n\n        departureTime = filterString(departureTime)\n        var departureTimeMin = getTimeAsMinuteOfDay(departureTime)\n\n        var arrivalTime = cols[DATA_INFO.ARR_TIME_COL]\n        arrivalTime = filterString(arrivalTime)\n        var arrivalTimeMin = getTimeAsMinuteOfDay(arrivalTime)\n\n        var elapsedTime = Number(cols[DATA_INFO.ELAPSED_TIME_COL])\n\n        var arrivalDelay = Number(cols[DATA_INFO.ARR_DELAY_COL])\n        var delayed = arrivalDelay > 0   // if its an arrival delay the precalculate its delayRatio\n        var delayRatio = delayed ? getDelayRatio(arrivalDelay, elapsedTime) : 0\n\n        var origin = String(cols[DATA_INFO.ORIGIN_COL])\n        origin = filterString(origin)\n\n        var destination = String(cols[DATA_INFO.DEST_COL])\n        destination = filterString(destination)\n\n        return {\n          flightDate: flightDate,\n          day: day,\n          origin: origin,\n          destination: destination,\n          departureTime: departureTime,\n          departureTimeMin: departureTimeMin,\n          arrivalTime: arrivalTime,\n          arrivalTimeMin: arrivalTimeMin,\n          arrivalDelay: arrivalDelay,\n          elapsedTime: elapsedTime,\n          distance: distance,\n          delayed: delayed,\n          delayRatio: delayRatio\n        }\n      })\n    }\n\n        /**\n         * Enrich data with airport name list.\n         * @param {Array} data- Array of flight schedule objects.\n         * @returns {Object} = Object composed of array flight schedule and airport name list.\n         */\n    function addAirPortData (data) {\n      var res = {}\n      data.forEach(function (item) {\n        if (!res[item.origin]) {\n          res[item.origin] = true\n        }\n        if (!res[item.destination]) {\n          res[item.destination] = true\n        }\n      })\n      var airports = Object.keys(res)\n      return { data: data, airports: airports }\n    }\n\n        /**\n         * Called to get flight delay data from memory or from local database.\n         * @returns {Promise} = Promise will resolve to flight delay data or reject when not found locally.\n         */\n    function getFlightDelayDataLocal () {\n      if (flightDelayData) { // if data exists as private variable resolve with it\n        return $q.when(flightDelayData)\n      } else {\n        return $localForage.getItem('flightData').then(function (data) {\n          if (!data) {  // if not found in local forage, reject with an error\n            return $q.reject(new Error('data not found'))\n          }\n          flightDelayData = data  // Set data in private variable and resolve with it\n          return $q.when(flightDelayData)\n        })\n      }\n    }\n\n        /**\n         * Called to get data from remote when data does not exists locally.\n         * @returns {Promise} = Promise will resolve with data or reject with error.\n         */\n    function getFlightDelayDataRemote () {\n      return $http.get(DATA_URL)\n                .then(getDataAsArray.bind(null, DATA_INFO.START_INDEX))\n                .then(convertDataToJson.bind(null, DATA_INFO.SEPERATOR))\n                .then(addAirPortData)\n                .then(cacheData)\n                .catch($q.reject)\n    }\n\n        /**\n         * Caches data locally in local database and in a private variable.\n         * @returns {Promise} = Promise will resolves with data, or rejects with error.\n         */\n    function cacheData (data) {\n      return $localForage.setItem('flightData', data)\n                .then(function (res) {\n                  flightDelayData = res // store in instance variable\n                  return flightDelayData\n                })\n    }\n\n        /**\n         * Queries for flight delays.\n         * @param {Object} query - Represents selected data points, day, origin and destination.\n         * @param {String} data - Flight delays data.\n         * @returns {Object} = Object representing delay  data, delay ratio data, average delay ratio, max delay ratio.\n         */\n    function queryFlightDelays (query, data) {\n      var delayTimeData = []\n      var delayRatioData = []\n      var totalDelayRatio = 0\n      var maxDelayRatio = 0\n      data.filter(function (item) { // if delayed and it matches query parameters\n        return item.delayed &&\n                    item.day === query.day.id &&\n                    item.destination === query.destination &&\n                    item.origin === query.origin\n      })\n                .forEach(function (item) {\n                  delayTimeData.push(item.departureTimeMin) // add time the flight departed to its list\n                  delayRatioData.push(item.delayRatio) // add delay ratio(precalculated) to its list\n                  totalDelayRatio += item.delayRatio   // add to total delay ratio used for calculating average delay ratio\n                  if (item.delayRatio > maxDelayRatio) { // keep track of the max delay ratio, used for ploting histogram\n                    maxDelayRatio = item.delayRatio\n                  }\n                })\n            // get average delay ratio\n      var averageDelayRatio = !delayRatioData.length ? 0 : Math.round((totalDelayRatio / delayRatioData.length) * 100) / 100\n      maxDelayRatio = Math.round(maxDelayRatio)\n      return { delayTimeData: delayTimeData, delayRatioData: delayRatioData, averageDelayRatio: averageDelayRatio, maxDelayRatio: maxDelayRatio }\n    }\n\n        /**\n         * Called to get data, check data locally first, if not found check remotely.\n         * @returns {Promise} = Promise resolves with data or reject.\n         */\n    function getFlightDelayData () {\n      return getFlightDelayDataLocal()\n                .catch(getFlightDelayDataRemote)\n    }\n\n    return {\n      getFlightDelayData: getFlightDelayData,\n      queryFlightDelays: queryFlightDelays\n    }\n  }\n})()\n","(function () {\n  'use strict'\n\n  angular\n        .module('App')\n        .controller('FlightDelaysController', FlightDelaysController)\n\n  FlightDelaysController.$inject = ['$timeout', 'FlightDelayService', 'FlightDelayChartService', 'flightDelayData', 'cfpLoadingBar']\n\n  function FlightDelaysController ($timeout, FlightDelayService, FlightDelayChartService, flightDelayData, cfpLoadingBar) {\n    var vm = this\n    vm.flightDelayData = flightDelayData\n    vm.selected = { day: '', origin: '', destination: '' } // keep track of search parameters\n\n    vm.weekDays = [\n            { id: 0, name: 'Sunday' },\n            { id: 1, name: 'Monday' },\n            { id: 2, name: 'Tuesday' },\n            { id: 3, name: 'Wednesday' },\n            { id: 4, name: 'Thursday' },\n            { id: 5, name: 'Friday' },\n            { id: 6, name: 'Saturday' }\n    ]\n\n    var chartOptions = {\n      arrivalDelayTime: { // keep track of arrival delays chart options\n        bins: 24,\n        max: 0,\n        intervals: 60,\n        xAxis: 'Hour of the day (departure time)',\n        yAxis: 'Frequency of arrival delays'\n      },\n      arrivalDelayRatio: { // keep track of arrival delay ratio chart options.\n        xAxisFormat: null,\n        bins: 10,\n        max: 0,\n        intervals: 10,\n        xAxis: 'Delay ratio in %',\n        yAxis: 'Frequency of arrival delays',\n        drawLine: { value: 0, text: 'Average(%) is ', chartId: 'ratios' }\n      }\n    }\n\n    function preBind (interval) { // prebind interval to x axis chart tick\n      return function (d) {\n        return Math.round(d * interval)\n      }\n    }\n\n    vm.chartData = {} //\n    vm.histogramOptions = {}\n\n    vm.enableSearch = function () { // enable search button.\n      return Object.keys(vm.selected).every(function (key) {\n        return vm.selected[key]\n      })\n    }\n\n    vm.search = function () {\n      cfpLoadingBar.start()\n\n      $timeout(function () {\n        cfpLoadingBar.complete()\n        // get data that matches the current selection\n        var delayData = FlightDelayService.queryFlightDelays(vm.selected, vm.flightDelayData.data)\n            // set delay chart properties\n        var arrivalData = getArrivalDelayHistogramData(delayData.delayTimeData, chartOptions.arrivalDelayTime)\n        vm.chartData.arrivalDelaytime = arrivalData.chartData\n        chartOptions.arrivalDelayTime.max = arrivalData.max // set chart max y axis option\n\n        vm.histogramOptions.arrivalDelayTime = FlightDelayChartService.getHistogramOptions(chartOptions.arrivalDelayTime)\n\n        var averageDelayRatio = delayData.averageDelayRatio\n        var maxDelayRatio = delayData.maxDelayRatio\n        chartOptions.arrivalDelayRatio.drawLine.value = averageDelayRatio // set the value of the average delay ratio\n            // set interval here based on maxDelayRatio\n            // maxDelayRatio/bins\n        var delayRatioChartInterval = maxDelayRatio ? maxDelayRatio / chartOptions.arrivalDelayRatio.bins : 10\n        chartOptions.arrivalDelayRatio.intervals = delayRatioChartInterval\n            // prebind intervals into xAxis formatter\n        chartOptions.arrivalDelayRatio.xAxisFormat = preBind(chartOptions.arrivalDelayRatio.intervals)\n\n            // set delay ratio chart properties\n        var delayRatioData = getArrivalDelayHistogramData(delayData.delayRatioData, chartOptions.arrivalDelayRatio)\n        vm.chartData.arrivalDelayRatio = delayRatioData.chartData\n        chartOptions.arrivalDelayRatio.max = delayRatioData.max\n        vm.histogramOptions.arrivalDelayRatio = FlightDelayChartService.getHistogramOptions(chartOptions.arrivalDelayRatio)\n      }, 2000)\n    }\n\n        /**\n         * Get the required histogram data. called by both histogram charts\n         * @param {Object} data- Chart data.\n         * @param {Object}  options-  options.\n         * @returns {Object} = Object with  Chart Data and max y axis value.\n         */\n    function getArrivalDelayHistogramData (data, options) {\n      var range = [0, options.bins * options.intervals] // range on the xaxis\n      var binData = d3.layout.histogram().bins(options.bins).range(range)(data)\n      var chartData = { bar: true, values: [] }\n      var localMaxY = 0\n      binData.forEach(function (item) {\n        if (localMaxY < item.y) {\n          localMaxY = item.y\n        }\n        chartData.values.push([item.x, item.y])\n      })\n      return { chartData: [chartData], max: localMaxY }\n    }\n  }\n})()\n","(function () {\n  'use strict'\n\n  angular\n        .module('App')\n        .factory('FlightDelayChartService', FlightDelayChartService)\n\n  FlightDelayChartService.$inject = []\n\n  function FlightDelayChartService () {\n        /**\n         * Get the options required for a histogram.\n         * @param {Object} options- option.\n         * @returns {Object} = Chart option.\n         */\n    function getHistogramOptions (options) {\n      function getYDomain () {\n        return options.max ? [0, options.max] : [0]\n      }\n\n      var yDomain = getYDomain()\n      var histogramOptions = {\n        chart: {\n          type: 'historicalBarChart',\n          margin: {\n            top: 20,\n            right: 20,\n            bottom: 65,\n            left: 50\n          },\n          useInteractiveGuideline: false,\n          callback: function (chart) {\n            if (options.drawLine && options.drawLine.value) {\n              var xScale = chart.xAxis.scale()\n              var margin = chart.margin()\n              var svg = d3.select('#' + options.drawLine.chartId + ' svg')\n              var height = chart.height()\n              var onXAxis = xScale(options.drawLine.value) / options.intervals\n              svg.append('line')\n                                .style('stroke', '#FF7F0E')\n                                .style('stroke-width', '2.5px')\n                                .attr('x1', onXAxis + margin.left)\n                                .attr('y1', margin.top)\n                                .attr('x2', onXAxis + margin.left)\n                                .attr('y2', height - margin.bottom)\n              svg.append('text')\n                                .attr('x', onXAxis + margin.left)\n                                .attr('y', margin.top)\n                                .text(options.drawLine.text + '' + options.drawLine.value)\n            }\n          },\n          height: 300,\n          x: function (d, i) {\n            return i\n          },\n          y: function (d) {\n            return d[1]\n          },\n          showValues: true,\n          valueFormat: function (d) {\n            return d3.format(',.1f')(d)\n          },\n          duration: 100,\n          xAxis: {\n            axisLabel: options.xAxis,\n            tickFormat: function (d) {\n              var format = options.xAxisFormat\n              return format && angular.isFunction(format) ? format(d) : d\n            },\n            ticks: options.bins\n\n          },\n          yAxis: {\n            axisLabel: options.yAxis,\n            axisLabelDistance: -10,\n            tickFormat: function (d) {\n              return d3.format(',.1f')(d)\n            }\n          },\n          yDomain: yDomain\n        }\n      }\n      return histogramOptions\n    }\n\n    return {\n      getHistogramOptions: getHistogramOptions\n    }\n  }\n})()\n","(function () {\n  'use strict'\n\n  angular\n        .module('App')\n        .config(stateConfig)\n\n  stateConfig.$inject = ['$stateProvider']\n\n  function stateConfig ($stateProvider) {\n    $stateProvider.state('app', {\n      abstract: true,\n      views: {\n        'navbar@': {\n          templateUrl: 'app/layouts/navbar/navbar.html',\n          controller: 'NavbarController',\n          controllerAs: 'vm'\n        }\n      },\n      resolve: {\n        flightDelayData: ['FlightDelayService',\n          function (FlightDelayService) {\n            return FlightDelayService.getFlightDelayData()\n          }\n        ]\n      }\n    })\n  }\n})()\n","(function () {\n  'use strict'\n    // DO NOT EDIT THIS FILE, EDIT THE GULP TASK NGCONSTANT SETTINGS INSTEAD WHICH GENERATES THIS FILE\n    angular\n        .module('App')\n        .constant('DEBUG_INFO_ENABLED', false)\n        .constant('DATA_URL', \"/RIATest/content/data.csv\")\n        .constant('DATA_INFO', {\n\t\"START_INDEX\": 1,\n\t\"SEPERATOR\": \",\",\n\t\"FLIGHT_DATE_COL\": 0,\n\t\"ORIGIN_COL\": 1,\n\t\"DEST_COL\": 2,\n\t\"DEP_TIME_COL\": 3,\n\t\"ARR_TIME_COL\": 4,\n\t\"ARR_DELAY_COL\": 5,\n\t\"ELAPSED_TIME_COL\": 6,\n\t\"DISTANCE_COL\": 7\n})\n;\n})();\n","(function () {\n  'use strict'\n\n  angular\n        .module('App', [\n          'ui.bootstrap',\n          'ui.router',\n          'LocalForageModule',\n          'ui.select',\n          'ngSanitize',\n          'nvd3',\n          'angular-loading-bar',\n          'ngAnimate'\n        ])\n        .config(config)\n\n  config.$inject = ['$urlRouterProvider', 'cfpLoadingBarProvider']\n  function config ($urlRouterProvider, cfpLoadingBarProvider) {\n    cfpLoadingBarProvider.latencyThreshold = 100\n    cfpLoadingBarProvider.includeSpinner = false\n    $urlRouterProvider.otherwise('/flight-delays')\n  }\n})()\n;\n(function () {\n  'use strict'\n\n  angular\n        .module('App')\n        .controller('NavbarController', NavbarController)\n\n  NavbarController.$inject = []\n\n  function NavbarController () {\n    var vm = this\n\n    vm.isNavbarCollapsed = true\n\n    vm.toggleNavbar = toggleNavbar\n    vm.collapseNavbar = collapseNavbar\n\n    function toggleNavbar () {\n      vm.isNavbarCollapsed = !vm.isNavbarCollapsed\n    }\n\n    function collapseNavbar () {\n      vm.isNavbarCollapsed = true\n    }\n  }\n})()\n;\n(function () {\n  'use strict'\n  angular\n        .module('App')\n        .config(stateConfig)\n\n  stateConfig.$inject = ['$stateProvider']\n\n  function stateConfig ($stateProvider) {\n    $stateProvider.state('flight-delays', {\n      parent: 'app',\n      url: '/flight-delays',\n      views: {\n        'content@': {\n          templateUrl: 'app/flight-delays/flight-delays.html',\n          controller: 'FlightDelaysController',\n          controllerAs: 'vm'\n        }\n      }\n    })\n  }\n})()\n;\n(function () {\n  'use strict'\n\n  angular\n        .module('App')\n        .factory('FlightDelayService', FlightDelayService)\n\n  FlightDelayService.$inject = ['$http', 'DATA_URL', 'DATA_INFO', '$q', '$localForage']\n\n  function FlightDelayService ($http, DATA_URL, DATA_INFO, $q, $localForage) {\n    var flightDelayData\n\n        /**\n         * Split csv file contents into array of strings starting from a specifed index.\n         * @param {Number} row - row to start slice from.\n         * @param {String} res - Multiine string representing csv file contents.\n         * @returns {Array} = Array of strings, each line representing an row in the file.\n         */\n    function getDataAsArray (row, res) {\n      var data = res.data\n      return data.split('\\n').slice(row).filter(function (line) {\n        return line\n      })\n    }\n\n        /**\n         * Converts an array of strings into array of objects.\n         * @param {Array} data- Array of strings.\n         * @param {String} separator - split strings by.\n         * @returns {Array} = Array of objects.\n         */\n    function convertDataToJson (seperator, data) {\n      seperator = seperator || ','\n\n      function getTimeAsMinuteOfDay (str) {\n                // get minutes of the day, 12:00 => 720 minute of the day\n        var arr = str.match(/.{1,2}/g).map(Number)\n        var hour = arr[0]\n        var min = arr[1]\n        return !hour ? min : (hour * 60) + min\n      }\n\n      function filterString (str) {\n        return str.replace(/\"/g, '')\n      }\n\n      function getDelayRatio (arrivalDelay, elapsedTime) {\n                // delay ratio is arrival delay in minutes / flight elapsed time in minutes\n        return (arrivalDelay / elapsedTime) * 100\n      }\n            // map through all the array entries, converting each entry to a corresponding object.\n      return data.map(function (line) {\n        var cols = line.split(seperator)\n        var flightDate = new Date(cols[DATA_INFO.FLIGHT_DATE_COL])\n        var day = flightDate.getDay()\n\n        var distance = Number(cols[DATA_INFO.DISTANCE_COL])\n        var departureTime = cols[DATA_INFO.DEP_TIME_COL]\n\n        departureTime = filterString(departureTime)\n        var departureTimeMin = getTimeAsMinuteOfDay(departureTime)\n\n        var arrivalTime = cols[DATA_INFO.ARR_TIME_COL]\n        arrivalTime = filterString(arrivalTime)\n        var arrivalTimeMin = getTimeAsMinuteOfDay(arrivalTime)\n\n        var elapsedTime = Number(cols[DATA_INFO.ELAPSED_TIME_COL])\n\n        var arrivalDelay = Number(cols[DATA_INFO.ARR_DELAY_COL])\n        var delayed = arrivalDelay > 0   // if its an arrival delay the precalculate its delayRatio\n        var delayRatio = delayed ? getDelayRatio(arrivalDelay, elapsedTime) : 0\n\n        var origin = String(cols[DATA_INFO.ORIGIN_COL])\n        origin = filterString(origin)\n\n        var destination = String(cols[DATA_INFO.DEST_COL])\n        destination = filterString(destination)\n\n        return {\n          flightDate: flightDate,\n          day: day,\n          origin: origin,\n          destination: destination,\n          departureTime: departureTime,\n          departureTimeMin: departureTimeMin,\n          arrivalTime: arrivalTime,\n          arrivalTimeMin: arrivalTimeMin,\n          arrivalDelay: arrivalDelay,\n          elapsedTime: elapsedTime,\n          distance: distance,\n          delayed: delayed,\n          delayRatio: delayRatio\n        }\n      })\n    }\n\n        /**\n         * Enrich data with airport name list.\n         * @param {Array} data- Array of flight schedule objects.\n         * @returns {Object} = Object composed of array flight schedule and airport name list.\n         */\n    function addAirPortData (data) {\n      var res = {}\n      data.forEach(function (item) {\n        if (!res[item.origin]) {\n          res[item.origin] = true\n        }\n        if (!res[item.destination]) {\n          res[item.destination] = true\n        }\n      })\n      var airports = Object.keys(res)\n      return { data: data, airports: airports }\n    }\n\n        /**\n         * Called to get flight delay data from memory or from local database.\n         * @returns {Promise} = Promise will resolve to flight delay data or reject when not found locally.\n         */\n    function getFlightDelayDataLocal () {\n      if (flightDelayData) { // if data exists as private variable resolve with it\n        return $q.when(flightDelayData)\n      } else {\n        return $localForage.getItem('flightData').then(function (data) {\n          if (!data) {  // if not found in local forage, reject with an error\n            return $q.reject(new Error('data not found'))\n          }\n          flightDelayData = data  // Set data in private variable and resolve with it\n          return $q.when(flightDelayData)\n        })\n      }\n    }\n\n        /**\n         * Called to get data from remote when data does not exists locally.\n         * @returns {Promise} = Promise will resolve with data or reject with error.\n         */\n    function getFlightDelayDataRemote () {\n      return $http.get(DATA_URL)\n                .then(getDataAsArray.bind(null, DATA_INFO.START_INDEX))\n                .then(convertDataToJson.bind(null, DATA_INFO.SEPERATOR))\n                .then(addAirPortData)\n                .then(cacheData)\n                .catch($q.reject)\n    }\n\n        /**\n         * Caches data locally in local database and in a private variable.\n         * @returns {Promise} = Promise will resolves with data, or rejects with error.\n         */\n    function cacheData (data) {\n      return $localForage.setItem('flightData', data)\n                .then(function (res) {\n                  flightDelayData = res // store in instance variable\n                  return flightDelayData\n                })\n    }\n\n        /**\n         * Queries for flight delays.\n         * @param {Object} query - Represents selected data points, day, origin and destination.\n         * @param {String} data - Flight delays data.\n         * @returns {Object} = Object representing delay  data, delay ratio data, average delay ratio, max delay ratio.\n         */\n    function queryFlightDelays (query, data) {\n      var delayTimeData = []\n      var delayRatioData = []\n      var totalDelayRatio = 0\n      var maxDelayRatio = 0\n      data.filter(function (item) { // if delayed and it matches query parameters\n        return item.delayed &&\n                    item.day === query.day.id &&\n                    item.destination === query.destination &&\n                    item.origin === query.origin\n      })\n                .forEach(function (item) {\n                  delayTimeData.push(item.departureTimeMin) // add time the flight departed to its list\n                  delayRatioData.push(item.delayRatio) // add delay ratio(precalculated) to its list\n                  totalDelayRatio += item.delayRatio   // add to total delay ratio used for calculating average delay ratio\n                  if (item.delayRatio > maxDelayRatio) { // keep track of the max delay ratio, used for ploting histogram\n                    maxDelayRatio = item.delayRatio\n                  }\n                })\n            // get average delay ratio\n      var averageDelayRatio = !delayRatioData.length ? 0 : Math.round((totalDelayRatio / delayRatioData.length) * 100) / 100\n      maxDelayRatio = Math.round(maxDelayRatio)\n      return { delayTimeData: delayTimeData, delayRatioData: delayRatioData, averageDelayRatio: averageDelayRatio, maxDelayRatio: maxDelayRatio }\n    }\n\n        /**\n         * Called to get data, check data locally first, if not found check remotely.\n         * @returns {Promise} = Promise resolves with data or reject.\n         */\n    function getFlightDelayData () {\n      return getFlightDelayDataLocal()\n                .catch(getFlightDelayDataRemote)\n    }\n\n    return {\n      getFlightDelayData: getFlightDelayData,\n      queryFlightDelays: queryFlightDelays\n    }\n  }\n})()\n;\n(function () {\n  'use strict'\n\n  angular\n        .module('App')\n        .controller('FlightDelaysController', FlightDelaysController)\n\n  FlightDelaysController.$inject = ['$timeout', 'FlightDelayService', 'FlightDelayChartService', 'flightDelayData', 'cfpLoadingBar']\n\n  function FlightDelaysController ($timeout, FlightDelayService, FlightDelayChartService, flightDelayData, cfpLoadingBar) {\n    var vm = this\n    vm.flightDelayData = flightDelayData\n    vm.selected = { day: '', origin: '', destination: '' } // keep track of search parameters\n\n    vm.weekDays = [\n            { id: 0, name: 'Sunday' },\n            { id: 1, name: 'Monday' },\n            { id: 2, name: 'Tuesday' },\n            { id: 3, name: 'Wednesday' },\n            { id: 4, name: 'Thursday' },\n            { id: 5, name: 'Friday' },\n            { id: 6, name: 'Saturday' }\n    ]\n\n    var chartOptions = {\n      arrivalDelayTime: { // keep track of arrival delays chart options\n        bins: 24,\n        max: 0,\n        intervals: 60,\n        xAxis: 'Hour of the day (departure time)',\n        yAxis: 'Frequency of arrival delays'\n      },\n      arrivalDelayRatio: { // keep track of arrival delay ratio chart options.\n        xAxisFormat: null,\n        bins: 10,\n        max: 0,\n        intervals: 10,\n        xAxis: 'Delay ratio in %',\n        yAxis: 'Frequency of arrival delays',\n        drawLine: { value: 0, text: 'Average(%) is ', chartId: 'ratios' }\n      }\n    }\n\n    function preBind (interval) { // prebind interval to x axis chart tick\n      return function (d) {\n        return Math.round(d * interval)\n      }\n    }\n\n    vm.chartData = {} //\n    vm.histogramOptions = {}\n\n    vm.enableSearch = function () { // enable search button.\n      return Object.keys(vm.selected).every(function (key) {\n        return vm.selected[key]\n      })\n    }\n\n    vm.search = function () {\n      cfpLoadingBar.start()\n\n      $timeout(function () {\n        cfpLoadingBar.complete()\n        // get data that matches the current selection\n        var delayData = FlightDelayService.queryFlightDelays(vm.selected, vm.flightDelayData.data)\n            // set delay chart properties\n        var arrivalData = getArrivalDelayHistogramData(delayData.delayTimeData, chartOptions.arrivalDelayTime)\n        vm.chartData.arrivalDelaytime = arrivalData.chartData\n        chartOptions.arrivalDelayTime.max = arrivalData.max // set chart max y axis option\n\n        vm.histogramOptions.arrivalDelayTime = FlightDelayChartService.getHistogramOptions(chartOptions.arrivalDelayTime)\n\n        var averageDelayRatio = delayData.averageDelayRatio\n        var maxDelayRatio = delayData.maxDelayRatio\n        chartOptions.arrivalDelayRatio.drawLine.value = averageDelayRatio // set the value of the average delay ratio\n            // set interval here based on maxDelayRatio\n            // maxDelayRatio/bins\n        var delayRatioChartInterval = maxDelayRatio ? maxDelayRatio / chartOptions.arrivalDelayRatio.bins : 10\n        chartOptions.arrivalDelayRatio.intervals = delayRatioChartInterval\n            // prebind intervals into xAxis formatter\n        chartOptions.arrivalDelayRatio.xAxisFormat = preBind(chartOptions.arrivalDelayRatio.intervals)\n\n            // set delay ratio chart properties\n        var delayRatioData = getArrivalDelayHistogramData(delayData.delayRatioData, chartOptions.arrivalDelayRatio)\n        vm.chartData.arrivalDelayRatio = delayRatioData.chartData\n        chartOptions.arrivalDelayRatio.max = delayRatioData.max\n        vm.histogramOptions.arrivalDelayRatio = FlightDelayChartService.getHistogramOptions(chartOptions.arrivalDelayRatio)\n      }, 2000)\n    }\n\n        /**\n         * Get the required histogram data. called by both histogram charts\n         * @param {Object} data- Chart data.\n         * @param {Object}  options-  options.\n         * @returns {Object} = Object with  Chart Data and max y axis value.\n         */\n    function getArrivalDelayHistogramData (data, options) {\n      var range = [0, options.bins * options.intervals] // range on the xaxis\n      var binData = d3.layout.histogram().bins(options.bins).range(range)(data)\n      var chartData = { bar: true, values: [] }\n      var localMaxY = 0\n      binData.forEach(function (item) {\n        if (localMaxY < item.y) {\n          localMaxY = item.y\n        }\n        chartData.values.push([item.x, item.y])\n      })\n      return { chartData: [chartData], max: localMaxY }\n    }\n  }\n})()\n;\n(function () {\n  'use strict'\n\n  angular\n        .module('App')\n        .factory('FlightDelayChartService', FlightDelayChartService)\n\n  FlightDelayChartService.$inject = []\n\n  function FlightDelayChartService () {\n        /**\n         * Get the options required for a histogram.\n         * @param {Object} options- option.\n         * @returns {Object} = Chart option.\n         */\n    function getHistogramOptions (options) {\n      function getYDomain () {\n        return options.max ? [0, options.max] : [0]\n      }\n\n      var yDomain = getYDomain()\n      var histogramOptions = {\n        chart: {\n          type: 'historicalBarChart',\n          margin: {\n            top: 20,\n            right: 20,\n            bottom: 65,\n            left: 50\n          },\n          useInteractiveGuideline: false,\n          callback: function (chart) {\n            if (options.drawLine && options.drawLine.value) {\n              var xScale = chart.xAxis.scale()\n              var margin = chart.margin()\n              var svg = d3.select('#' + options.drawLine.chartId + ' svg')\n              var height = chart.height()\n              var onXAxis = xScale(options.drawLine.value) / options.intervals\n              svg.append('line')\n                                .style('stroke', '#FF7F0E')\n                                .style('stroke-width', '2.5px')\n                                .attr('x1', onXAxis + margin.left)\n                                .attr('y1', margin.top)\n                                .attr('x2', onXAxis + margin.left)\n                                .attr('y2', height - margin.bottom)\n              svg.append('text')\n                                .attr('x', onXAxis + margin.left)\n                                .attr('y', margin.top)\n                                .text(options.drawLine.text + '' + options.drawLine.value)\n            }\n          },\n          height: 300,\n          x: function (d, i) {\n            return i\n          },\n          y: function (d) {\n            return d[1]\n          },\n          showValues: true,\n          valueFormat: function (d) {\n            return d3.format(',.1f')(d)\n          },\n          duration: 100,\n          xAxis: {\n            axisLabel: options.xAxis,\n            tickFormat: function (d) {\n              var format = options.xAxisFormat\n              return format && angular.isFunction(format) ? format(d) : d\n            },\n            ticks: options.bins\n\n          },\n          yAxis: {\n            axisLabel: options.yAxis,\n            axisLabelDistance: -10,\n            tickFormat: function (d) {\n              return d3.format(',.1f')(d)\n            }\n          },\n          yDomain: yDomain\n        }\n      }\n      return histogramOptions\n    }\n\n    return {\n      getHistogramOptions: getHistogramOptions\n    }\n  }\n})()\n;\n(function () {\n  'use strict'\n\n  angular\n        .module('App')\n        .config(stateConfig)\n\n  stateConfig.$inject = ['$stateProvider']\n\n  function stateConfig ($stateProvider) {\n    $stateProvider.state('app', {\n      abstract: true,\n      views: {\n        'navbar@': {\n          templateUrl: 'app/layouts/navbar/navbar.html',\n          controller: 'NavbarController',\n          controllerAs: 'vm'\n        }\n      },\n      resolve: {\n        flightDelayData: ['FlightDelayService',\n          function (FlightDelayService) {\n            return FlightDelayService.getFlightDelayData()\n          }\n        ]\n      }\n    })\n  }\n})()\n;\n(function () {\n  'use strict'\n    // DO NOT EDIT THIS FILE, EDIT THE GULP TASK NGCONSTANT SETTINGS INSTEAD WHICH GENERATES THIS FILE\n    angular\n        .module('App')\n        .constant('DEBUG_INFO_ENABLED', false)\n        .constant('DATA_URL', \"/RIATest/content/data.csv\")\n        .constant('DATA_INFO', {\n\t\"START_INDEX\": 1,\n\t\"SEPERATOR\": \",\",\n\t\"FLIGHT_DATE_COL\": 0,\n\t\"ORIGIN_COL\": 1,\n\t\"DEST_COL\": 2,\n\t\"DEP_TIME_COL\": 3,\n\t\"ARR_TIME_COL\": 4,\n\t\"ARR_DELAY_COL\": 5,\n\t\"ELAPSED_TIME_COL\": 6,\n\t\"DISTANCE_COL\": 7\n})\n;\n})();\n;(function(){angular.module(\"App\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"app/flight-delays/flight-delays.html\",\"<div><div class=\\\"row search-box\\\"><div class=\\\"col-md-3\\\"><ui-select ng-model=\\\"vm.selected.day\\\" title=\\\"Week day\\\" theme=\\\"bootstrap\\\"><ui-select-match placeholder=\\\"Choose a week day\\\"><span ng-bind=\\\"vm.selected.day.name\\\"></span></ui-select-match><ui-select-choices repeat=\\\"day in (vm.weekDays | filter: $select.search) track by day.id\\\" position=\\\"down\\\"><span ng-bind=\\\"day.name\\\"></span></ui-select-choices></ui-select></div><div class=\\\"col-md-3\\\"><ui-select ng-model=\\\"vm.selected.origin\\\" title=\\\"Origin airport\\\"><ui-select-match placeholder=\\\"Choose origin airport\\\"><span ng-bind=\\\"vm.selected.origin\\\"></span></ui-select-match><ui-select-choices repeat=\\\"airport in (vm.flightDelayData.airports | filter: $select.search) track by airport\\\" position=\\\"down\\\"><span ng-bind=\\\"airport\\\"></span></ui-select-choices></ui-select></div><div class=\\\"col-md-3\\\"><ui-select ng-model=\\\"vm.selected.destination\\\" title=\\\"Destination airport\\\"><ui-select-match placeholder=\\\"Choose destination airport\\\"><span ng-bind=\\\"vm.selected.destination\\\"></span></ui-select-match><ui-select-choices repeat=\\\"airport in (vm.flightDelayData.airports | filter: $select.search) track by airport\\\" position=\\\"down\\\"><span ng-bind=\\\"airport\\\"></span></ui-select-choices></ui-select></div><div class=\\\"col-md-3\\\"><button class=\\\"btn btn-primary\\\" ng-click=\\\"vm.search()\\\" ng-disabled=\\\"!vm.enableSearch()\\\"><span class=\\\"glyphicon glyphicon-search\\\"></span> <span>Search</span></button></div></div><div class=\\\"vertical-offset-50\\\"></div><div class=\\\"row\\\"><div class=\\\"col-md-6 col-xm-12\\\" ng-if=\\\"vm.histogramOptions.arrivalDelayTime\\\"><div class=\\\"chart-box radius-primary\\\"><div class=\\\"padded-title\\\"><h4>Arrival delays</h4></div><nvd3 options=\\\"vm.histogramOptions.arrivalDelayTime\\\" data=\\\"vm.chartData.arrivalDelaytime\\\"></nvd3></div></div><div class=\\\"col-md-6 col-xm-12\\\" ng-if=\\\"vm.histogramOptions.arrivalDelayRatio\\\"><div class=\\\"chart-box radius-primary\\\"><div class=\\\"padded-title\\\"><h4>Arrival delay ratio</h4></div><nvd3 id=\\\"ratios\\\" options=\\\"vm.histogramOptions.arrivalDelayRatio\\\" data=\\\"vm.chartData.arrivalDelayRatio\\\"></nvd3></div></div></div></div>\");\n$templateCache.put(\"app/layouts/navbar/navbar.html\",\"<nav class=\\\"navbar navbar-default\\\" role=\\\"navigation\\\"><div class=\\\"container\\\"><div class=\\\"navbar-header\\\"><button type=\\\"button\\\" class=\\\"navbar-toggle\\\" ng-click=\\\"vm.toggleNavbar()\\\"><span class=\\\"sr-only\\\">Toggle navigation</span> <span class=\\\"icon-bar\\\"></span> <span class=\\\"icon-bar\\\"></span> <span class=\\\"icon-bar\\\"></span></button> <a class=\\\"navbar-brand logo\\\" href=\\\"#/\\\" ng-click=\\\"vm.collapseNavbar()\\\"><img class=\\\"logo-img\\\" src=\\\"content/images/logo.png\\\"> <span>Flight Delay</span></a></div><div class=\\\"navbar-collapse\\\" uib-collapse=\\\"vm.isNavbarCollapsed\\\"><ul class=\\\"nav navbar-nav navbar-left\\\"><li ui-sref-active=\\\"active\\\"><a ui-sref=\\\"flight-delays\\\" ng-click=\\\"vm.collapseNavbar()\\\"><span class=\\\"glyphicon glyphicon-time\\\"></span> <span class=\\\"hidden-sm\\\">Arrival delays</span></a></li></ul></div></div></nav>\");}]);})();"],"sourceRoot":"/source/"}